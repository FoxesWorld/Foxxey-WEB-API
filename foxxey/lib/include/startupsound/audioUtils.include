<?php
if(!defined('startUpSound')) {
	die('{"message": "Not in startUpSound thread"}');
}
	class audioUtils extends startUpSound {

		protected  static function getFileLength ($getid3){
			$duration = $getid3->info['playtime_string'];
			$time = str_replace(0, "",explode(':', $duration)[1]);
			
			return $time;
		}

		protected static function getAdditionalInfo($getid3){
			if(is_array(@$getid3->info['tags']['id3v1']['comment'])) {
				@$soundAdditionalData = $getid3->info['tags']['id3v1']['comment'][0];
				return $soundAdditionalData;
			} else {
				return "undefined";
			}
		}

		/**
		* @param String type {voice||mus}, Integer range
		* @return random {voice||mus}
		*/
		public static function genRange($type, $range){
			switch($range) {
				case (is_array($range)):
					$minRange = $range[0];
					$maxRange = $range[1];
					startUpSound::$soundRangeDebug = '<div style="border: 1px solid black; padding: 5px; border-radius: 10px; width: fit-content; margin: 15 0px;">'.
					'<h1 style="font-size: large;margin: 0;">'.$type.'Range</h1>'.
					 "<b>minRange:</b>".$minRange.'<br>'.
					 "<b>maxRange:</b>".$maxRange.'</div>';
				break;

				case (!is_array($range)):
					$minRange = $range;
					$maxRange = $range;
					startUpSound::$soundRangeDebug = '<div style="border: 1px solid black; padding: 5px; border-radius: 10px; width: fit-content; margin: 15 0px;">'.
					'<h1 style="font-size: large;margin: 0;">'.$type.'Range</h1>'.
					 "<b>".$type."ToPlay:</b>".$minRange.'</div>';
				break;

				default:
					$minRange = 1;
				break;
			}
			$RandSoundFile = $type.rand($minRange,$maxRange).'.mp3';
			
			return $RandSoundFile;
		}
		
		public static function sndPreFetch($sndFolder){
			$dirContents = filesInDir::filesInDirArray($sndFolder, '.mp3');
			sort($dirContents, SORT_STRING | SORT_NATURAL);
			$allFilesArray = array();
			$moodListArray = array();
			$charactersArray = array();

			foreach ($dirContents as $key){
				$fullPath = $sndFolder.'/'.$key;
					$fileInfo = self::getAudioInfo($fullPath);
					$allFilesArray[] = $fileInfo;
						if(!in_array($fileInfo['SNDMOOD'], $moodListArray)){
							$moodListArray[] = $fileInfo['SNDMOOD'];
						}
						
						if(!in_array($fileInfo['CHARACTER'], $charactersArray)){
							$charactersArray[] = $fileInfo['CHARACTER'];
						}
			}
			$allFilesArray	 = array_filter($allFilesArray);
			$moodListArray	 = array_filter($moodListArray);
			$charactersArray = array_filter($charactersArray);

				$outputArray = array(	
					'allFiles' => $allFilesArray, 
					'moodList' => $moodListArray,
					'charactersArray' => $charactersArray
				);
			
			return $outputArray;
		}
		
		/*
				An essential method used for getting 
				allAudioInfo by a specifyed ID3 tag and it's value
		*/
		public static function getByTag($tag, $value, $allFilesArray){
			$allFileInfo = array();
			foreach ($allFilesArray as $key){
				if($key[$tag] === $value){
					$allFileInfo[] = $key;
				}
			}

			return $allFileInfo;
		}
		
		protected static function getAudioInfo($audioPath){
			$answer = array();
			if(file_exists($audioPath)) {
				$getid3 = new getID3();
				$getid3->encoding = 'UTF-8';
				$getid3->Analyze($audioPath);
				$answer['SNDMOOD'] = @$getid3->info["id3v2"]["comments"]["text"]["SNDMOOD"];
				$answer['CHARACTER'] = @$getid3->info["id3v2"]["comments"]["text"]["CHARACTER"];
				$answer['durationSnd'] = audioUtils::getFileLength($getid3);
				$answer['fileName'] = str_replace(startUpSound::$absMnt,"",$audioPath);
				$answer['md5'] = md5_file($audioPath);
				$answer['soundAdditionalData'] = audioUtils::getAdditionalInfo($getid3);
			} else {
				$answer = 'noFile';
			}
			
			return $answer;
		}
		
		protected static function getMood($file){
			$mood = audioUtils::getAudioInfo($file)['SNDMOOD'];
			
			return $mood;
		}

		/*
		 * @param boolean $debug
		 * @return Integer maxDuration
		 */
		protected static function maxDuration($mus, $snd) {
			$duration = 0;
			if($mus > $snd) {
				$duration = $mus;
			} else {
				$duration = $snd;
			}
				startUpSound::$maxDuration = $duration - 1;
		}

		/*
		 * @param boolean $debug, Integer chance, of - sound|music
		 * @return String easter
		 */
		protected static function easter($chance, $of) {
			$minRange = 1;
			$maxRange = 1000;
			$easterChance = mt_rand($minRange, $maxRange);
			switch($of){
				case 'sound':
					$confRarity = startUpSound::$config['easterSndRarity'];
				break;
				
				case 'music':
					$confRarity = startUpSound::$config['easterMusRarity'];
				break;
			}
				if ($easterChance <= $chance){
					startUpSound::$easter = "/easter";
					switch($of){
						case 'sound':
							startUpSound::$isEasterSnd = 'true';
						break;
						
						case 'music':
							startUpSound::$isEasterMus = 'true';
						break;
					}
					$easterStatus = true;
				} else {
					$easterStatus = true;
					startUpSound::$easter = "";
				}
			return $easterStatus;
		}
	}