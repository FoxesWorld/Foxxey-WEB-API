<?php
/*
=====================================================
 startUpSound Class
-----------------------------------------------------
 https://Foxesworld.ru/
-----------------------------------------------------
 Copyright (c) 2016-2021 FoxesWorld
-----------------------------------------------------
 This code is reserved
-----------------------------------------------------
 File: startUpSound.class.php
-----------------------------------------------------
 Version: 0.4.47.0 Unreal
-----------------------------------------------------
 Usage: Current Event Sound generation
=====================================================
*/

if (!defined('FOXXEY')) {
	die ('{"message": "Not in FOXXEY thread"}');
} else {
	define('startUpSound', true);
}

/* TODO
 * Maybe storing a Mus|Sound file shift in ID3 tags
 * Force easterMus, Force easterSnd
 * Config utils
 */

	class startUpSound {

		/* Base utils */

		private 	   $cacheFilePath 	= ETC.'startupsound.timetable';
		private 	   $event 			= '';
		private static $serverVersion 	= '0.4.47.0 Unreal';
		public static  $absMnt;
		private static $currentDate 	= CURRENT_DATE;
		private static $musMnt 			= 'mus';
		private static $sndMnt 			= 'snd';
		private static $seasonNow 		= '';
		private static $dayTimeNow 		= '';
		private static $useDayTime 		= false;
		private static $useSeasons 		= false;
		public static  $musFilesNum 	= 0;
		public static  $soundFilesNum 	= 0;
		protected static $easter 		= "";
		
		/*ARGS*/
		protected static $eventNow 		= 'common';
		protected static $notAllow		= array();
		
		/*CONFIG*/
		private $mdlName				= null;
		protected static $config		= array();
		private $defaultConfig = array('startupsound' => 
		array(
			'debug' => false,
			'mountDir' 			=> SITE_ROOT."/etc/startUpSoundRepo",
			'enableVoice' 		=> true,
			'enableMusic' 		=> true,
			'easterMusRarity'   => 10,
			'easterSndRarity'	=> 1
		));

		protected static $eventsArray = array(
			'01' => array(
				"1-12" =>  array(
					'eventName' => 'winterHolidays',
				)
			),

			'02' => array(
			
			),
			
			'03' => array(
			
			),
			
			'04' => array(
			
			),
			
			'05' => array(

			),

			'06' => array(

			),

			'07' => array(

			),

			'08' => array(

			),

			'09' => array(

				'1' => array(
					'eventName' => '8bit')
			),

			'10' => array(

			),

			'11' => array(
			
			),

			'12' => array(
				"26-30" =>  array(
					'eventName' => 'winterHolidays'
				),
				
				"31"	=> array(
					'eventName' => 'newYear'
				)
			)
			/*
				'NotAllow' => array(
					'SNDMOOD' => array('WTM','WTMY','WTMC')
				)
			*/
		);

		/* Mus */
		protected static $musArray;
		protected static $isEasterMus 		= 'false';			//Is the mus is easter

		/* Sound */
		protected static $sndArray;
		protected static $isEasterSnd 		= 'false';	//Is the sound is easter

		/* Both */
		protected static $moodToPlay 		= null;
		protected static $characterToPlay 	= null;
		protected static $maxDuration 		= 0;		//Maximum duration

		//Initialisation
		function __construct() {
			$this->mdlName = basename(__FILE__, '.action');
			$conf = conff::confGen($this->mdlName, $this->defaultConfig);
			self::$config = $conf->readInIarray();

			if(!isset($_REQUEST['startUpSoundAPI'])) {
				startUpSound::$eventsArray = file::efile($this->cacheFilePath, true, startUpSound::$eventsArray)['content'];
			}

			if(static::$useSeasons){
				startUpSound::$seasonNow = seasonOptions::seasonNow();
			}

			filesInDir::getIncludes($this->mdlName);
			startUpSound::$absMnt = self::$config['mountDir'];
			
			/*SUBCLASS INIT*/
			startUpSound::$moodToPlay 	   = $_GET['MOOD'] 		?? null;
			startUpSound::$characterToPlay = $_GET['CHAR'] 		?? null;
			$this->event = new eventScanning(date::getCurrentDate('day'), date::getCurrentDate('month'));
				if(static::$useDayTime) {
					$this->dayTimeGetting();
				}

			startUpSound::$musArray['selMus'] = "musicOff";
			startUpSound::$sndArray['selSnd'] = "soundOff";
			$this->genSnd(static::$notAllow);
			$this->genMus();
			audioUtils::maxDuration(startUpSound::$musArray['durMus'], startUpSound::$sndArray['durSnd']);
			if(isset($_REQUEST['startUpSoundAPI'])) {
				$easterMusNum = count(filesInDir::filesInDirArray(static::$absMnt.'/'.static::$eventNow.'/'.static::$musMnt.'/easter', '.mp3'));
				$easterSndNum = count(filesInDir::filesInDirArray(static::$absMnt.'/'.static::$eventNow.'/'.static::$sndMnt.'/easter', '.mp3'));
				$api = new startUpSoundAPI(static::$serverVersion, static::$musFilesNum, static::$soundFilesNum, $easterMusNum, $easterSndNum, static::$eventNow, $this->cacheFilePath, startUpSound::$eventsArray);
				$api->apiOut();
			}
		}

		public function generateAudio() {
			exit($this->outputJson());
		}

		private function genMus() {	

			if(self::$config['enableMusic']) {
				$easterStatus = audioUtils::easter(self::$config['easterMusRarity'], 'music');

					$currentMusFolder = static::$absMnt.'/'.static::$eventNow.'/'.static::$musMnt.static::$easter;	
					if(!startUpSound::$sndArray['SNDMOOD'] == null) {
						$sndMood = startUpSound::$sndArray['SNDMOOD'];
						$dirScan = audioUtils::sndPreFetch($currentMusFolder);
						$thisMoodArray = audioUtils::getByTag('SNDMOOD', $sndMood, $dirScan['allFiles']);
						$arraySize = count($thisMoodArray);
						switch($arraySize){
							case 0:
								$randMusFile = $thisMoodArray;
							break;
							
							default:
								$randMusFile = $thisMoodArray[rand(0, $arraySize-1)];
							break;
							
						}

						startUpSound::$musArray['selMus'] = $randMusFile['fileName'];
						startUpSound::$musArray['musMd5'] 		 = $randMusFile['md5'];
						startUpSound::$musArray['durMus'] 	 = $randMusFile['durationSnd'];
				}
			}
		}

		private function genSnd($notAllow = null) {
			if(self::$config['enableVoice']) {
				audioUtils::easter(self::$config['easterSndRarity'], 'sound');
				$currentSoundFolder = static::$absMnt.'/'.static::$eventNow.'/'.static::$sndMnt.static::$seasonNow.static::$dayTimeNow.static::$easter;
				startUpSound::$sndArray['selSnd'] = 'soundOff';
				if(is_dir($currentSoundFolder)) {
					$dirScan = audioUtils::sndPreFetch($currentSoundFolder);
					startUpSound::$soundFilesNum = count($dirScan['allFiles']);
					if(static::$isEasterSnd === 'true'){	
						if(startUpSound::$soundFilesNum < 1){
							$currentSoundFolder = str_replace('/easter', "", $currentSoundFolder);
							startUpSound::$easterSndWarn = '<b style="color: red;">Esater Snd not found, using common</b><br>';
						}
					}
					
					function genSndFromArray($array){
						$arraySize = count($array)-1;
						$rndNum = rand(0, $arraySize);

						$outArray = array(
							'fileName' => $array[$rndNum]['fileName'],
							'md5' => $array[$rndNum]['md5'],
							'durSnd'=> $array[$rndNum]['durationSnd'],
							'SNDMOOD'	  => $array[$rndNum]['SNDMOOD'],
							'sndADT' => $array[$rndNum]['soundAdditionalData']
						);

						return $outArray;
					}
					
					function restrictedTags($array, $restrictedArray){
							if($restrictedArray){
								foreach($restrictedArray as $key => $value){
									$restrKey = $key;
									$restrVal = $value;
									foreach($array as $key){
										if(!in_array($key[$restrKey], $restrVal)){
											$ArrayARST[] = $key;
										}
									}
								}
							} else {
								$ArrayARST = $array;
							}
						return $ArrayARST;
					}

					function filterArray($dirScan, $workArray, $character = null, $mood = null){
						
						function moodFilter($mood, $moodArray, $workArray){
							$AFTTP = $workArray;
								if($mood) {
									if(in_array($mood, $moodArray)) {
										$AFTTP = audioUtils::getByTag('SNDMOOD', $mood, $workArray);
										if(!count($AFTTP)) {
											$AFTTP = $workArray;
										}
									}
								}
							return $AFTTP;
						}
							
						function charFilter($character, $charArray, $AFTTP){
							$generatedSND = genSndFromArray($AFTTP);
							if($character) {
								if(in_array($character, $charArray)){
								$thisCharacterArray = audioUtils::getByTag('CHARACTER', $character, $AFTTP);
									if(count($thisCharacterArray)){
										$generatedSND = $thisCharacterArray[rand(0,count($thisCharacterArray)-1)];
									}
								}
							}
							return $generatedSND;
						}
						
						$generatedSND = charFilter($character, $dirScan['charactersArray'], moodFilter($mood, $dirScan['moodList'], $workArray));
						
						return $generatedSND;
					}
					$generatedSND = filterArray($dirScan, restrictedTags($dirScan['allFiles'], $notAllow), startUpSound::$characterToPlay, startUpSound::$moodToPlay);

					startUpSound::$sndArray['selSnd'] 	   = $generatedSND['fileName'];
					startUpSound::$sndArray['sndMd5']	 	   = $generatedSND['md5'];
					startUpSound::$sndArray['SNDMOOD'] 		 	   = $generatedSND['SNDMOOD'];
					startUpSound::$sndArray['durSnd'] 	 	   = $generatedSND['durSnd'];
					startUpSound::$sndArray['sndADT'] = $generatedSND['sndADT'];
				}
			}
		}

		private function outputJson() {
			$mountPoint = str_replace(SITE_ROOT, '', static::$absMnt);
			$outputArray = array(
					"maxDuration" 		=> (Integer)static::$maxDuration,
					"sndLevel" 			=> (Integer)-15,
					"musLevel" 			=> (Integer)-20,
					"selectedMusic" 	=> (String) static::$musArray['selMus'],
					"selectedSound" 	=> (String) static::$sndArray['selSnd'],
					"soundMd5" 			=> (String) static::$sndArray['sndMd5'],
					"MusicMd5" 			=> (String) static::$musArray['musMd5'],
					"eventInfo"			=> (String) static::$sndArray['sndADT'],
					"eventName" 		=> (String) static::$eventNow,
					'serverVersion'		=> (String) static::$serverVersion,
					'mountPoint'		=> (String) $mountPoint);

			return json_encode($outputArray, JSON_UNESCAPED_SLASHES);
		}
	}