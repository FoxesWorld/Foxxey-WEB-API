<?php
/*
=====================================================
 startUpSound Class
-----------------------------------------------------
 https://Foxesworld.ru/
-----------------------------------------------------
 Copyright (c) 2016-2021 FoxesWorld
-----------------------------------------------------
 This code is reserved
-----------------------------------------------------
 File: startUpSound.class.php
-----------------------------------------------------
 Version: 0.4.39.13 Unreal
-----------------------------------------------------
 Usage: Current Event Sound generation
=====================================================
*/

if (!defined('FOXXEY')) {
	die ('{"message": "Not in FOXXEY thread"}');
} else {
	define('startUpSound', true);
}

/*		 USAGE

		$startSound = new startUpSound({Debug});
		$sounds = $startSound->generateAudio();
		Returns JSON
*/

/* TODO 
 * Rewrite startUpSound to work with API
 * If Mus is too long generate another one sound => will be made in startUpSound 1.2.0.0
 * Maybe storing a Mus|Sound file shift in ID3 tags
 * AI with the local sqlite.db
 * Force easterMus, Force easterSnd
 */

	class startUpSound {

		/* Base utils */

		private $cacheFilePath 			= ETC.'startupsound.timetable';
		private $event 					= '';
		private static $serverVersion 	= '0.4.39.13 Unreal';
		private static $AbsolutesoundPath;
		private static $currentDate 	= CURRENT_DATE;
		private static $musMountPoint 	= 'mus';
		private static $sndMountPoint 	= 'snd';
		protected static $eventNow 		= 'common';
		private static $seasonNow 		= '';
		private static $dayTimeNow 		= '';
		private static $useDayTime 		= false;		//Use DayTime snd? (Morning, Day, Evening, Night)
		private static $useSeasons 		= false;		//Use Seasons? (Winter, Spring, Summer, Autumn)
		public static $musFilesNum 		= 0;
		public static $soundFilesNum 	= 0;
		protected static $easter 			= "";
		private static $debug 			= false;
		
		/*CONFIG*/
		private $mdlName				= null;
		protected static $config		= array();
		private $defaultConfig = array('startupsound' => 
		array(
			'debug' => false,
			'mountDir' 			=> SITE_ROOT."/etc/startUpSoundRepo",
			'enableVoice' 		=> true,
			'enableMusic' 		=> true,
			'easterMusRarity'   => 10,
			'easterSndRarity'	=> 1
		));

		/* Date */
		private $dayToday;
		private $monthToday;
		private $yearToday;

		/* Event Arrays */
		protected static $eventsArray = array(
			'01' => array(
				"1-12" =>  array(
					'eventName' => 'winterHolidays',
					'soundRange'=> '2/5'
				)
			),

			'02' => array(
			
			),
			
			'03' => array(
			
			),
			
			'04' => array(
			
			),
			
			'05' => array(
			
			),
			
			'06' => array(
			
			),
			
			'07' => array(
			
			),
			
			'08' => array(
				'5-13' => array(
					'eventName' => 'Killing teddy!',
					'soundRange'=> '2/5'),

				'20-23' => array(
					'eventName' => 'Praising DarkFoxes',
					'soundRange'=> '2/5'
				)
			),

			'09' => array(
				
				'1' => array(
					'eventName' => '8bit')
			),
			
			'10' => array(
				'13' => array(

				),
			
			),
			
			'11' => array(
				'29-31' => array(
					'soundRange'=>  '100/328'
				),
			
			),

			'12' => array(

			)
		);

		/* Mus */
		private static $musPerEvent 		= true;				//Use different music for an each event
		private static $selectedMusic		= ''; 				//Selected mus File
		private static $musFileAbsolute		= '';				//Absolute musFilePath
		protected static $durationMus 		= 0;				//Duration of a musFile
		private static $musMd5				= '';				//musFile md5
		private static $musAdditionalData	= '';				//Comment (Not used)
		protected static $isEasterMus 		= 'false';			//Is the mus is easter
		private static $easterMusWarn		= '';				//Warn message if easter not found

		/* Sound */
		protected static $selectedSound		= ''; 		//Selected sound File
		protected static $SNDMOOD			= '';
		protected static $soundFileAbsolute	= '';		//Absolute soundFilePath
		protected static $durationSnd 		= 0;		//Duration of a soundFile
		protected static $soundMd5			= '';		//soundFile md5
		protected static $soundAdditionalData = 'NoData';	//Comment
		public static $soundRange			= 0;		//Range of sound files
		protected static $isEasterSnd 		= 'false';	//Is the sound is easter
		protected static $easterSndWarn		= '';		//Warn message if easter not found

		/* Both */
		protected static $maxDuration 		= 0;		//Maximum duration
		protected static $soundRangeDebug	= '';		//Debug info of the range

		//Initialisation
		function __construct() {
			$this->mdlName = basename(__FILE__, '.action');
			$conf = conff::confGen($this->mdlName, $this->defaultConfig);
			self::$config = $conf->readInIarray();

			$dateExploded = explode ('.',CURRENT_DATE);
			$this->dayToday = $dateExploded[0];
			$this->monthToday = $dateExploded[1];
			$this->yearToday = $dateExploded[2];

			if(!isset($_REQUEST['startUpSoundAPI'])) {
				startUpSound::$eventsArray = file::efile($this->cacheFilePath, true, startUpSound::$eventsArray)['content'];
			}
			
			if(static::$useSeasons){
				startUpSound::$seasonNow = seasonOptions::seasonNow();
			}
			
			filesInDir::getIncludes($this->mdlName);
			startUpSound::$AbsolutesoundPath = self::$config['mountDir'];
			startUpSound::$debug = false;
			
			/*SUBCLASS INIT*/
			$this->event = new eventScanning($this->dayToday, $this->monthToday);
				if(static::$useDayTime) {
					$this->dayTimeGetting();
				}
			if(static::$debug){
				echo '<h1>startUpSound <i>'.static::$serverVersion.'</i></h1>
				<div style="border: 1px dashed black; padding: 5px; border-radius: 10px; width: fit-content; margin: 15px;">';
			}
			$this->genSnd(static::$debug);
			$this->genMus(static::$debug);
			audioUtils::maxDuration(static::$debug);
			if(isset($_REQUEST['startUpSoundAPI'])) {
				$easterMusNum = count(filesInDir::filesInDirArray(static::$AbsolutesoundPath.'/'.static::$eventNow.'/'.static::$musMountPoint.'/easter', '.mp3'));
				$easterSndNum = count(filesInDir::filesInDirArray(static::$AbsolutesoundPath.'/'.static::$eventNow.'/'.static::$sndMountPoint.'/easter', '.mp3'));
				$api = new startUpSoundAPI(static::$serverVersion, static::$musFilesNum, static::$soundFilesNum, $easterMusNum, $easterSndNum, static::$eventNow, $this->cacheFilePath, startUpSound::$eventsArray);
				$api->apiOut();
			}
		}

		//Function for getting the result of startUpSound work
		public function generateAudio() {
			if(static::$debug === false) {
				echo $this->outputJson();
			}
		}

		private function genMus($debug = false) {
			$unExistingFolder = '';
			$musOut = '';			

			if(self::$config['enableMusic']) {
				$easterStatus = audioUtils::easter(self::$config['easterMusRarity'], static::$debug, 'music');
				
					if(static::$musPerEvent === true) {
						$currentMusFolder = static::$AbsolutesoundPath.'/'.static::$eventNow.'/'.static::$musMountPoint.static::$easter;
					} else {
						$currentMusFolder = static::$AbsolutesoundPath.'/'.static::$musMountPoint.static::$easter;
					}

					$musFilesInDir = filesInDir::filesInDirArray($currentMusFolder, '.mp3');
					foreach($musFilesInDir as $key){
						$musMd5 = md5_file($currentMusFolder.'/'.$key);
						$getid3 = new getID3();
						$getid3->encoding = 'UTF-8';
						$getid3->Analyze($currentMusFolder.'/'.$key);
						$durationMus = audioUtils::getFileLength($getid3);
						$SNDMOOD = @$getid3->info["id3v2"]["comments"]["text"]["SNDMOOD"];
						if($SNDMOOD === startUpSound::$SNDMOOD){
							$musFilesArray[] = array(
							"sndName"   => $key,
							"sndHash"	=> $musMd5,
							"duration"	=> $durationMus,
							"SNDMOOD"	=> $SNDMOOD);
						} else {
							unset($key);
						}
					}
					
					if(count($musFilesArray) > 1){
						foreach($musFilesArray as $key){
							shuffle($musFilesArray);
							foreach($musFilesArray as $key){
								$musOut = $key['sndName'];
								startUpSound::$musMd5 = $key['sndHash'];
								startUpSound::$durationMus = $key['duration'];
							} 
						}
					} else {
						foreach ($musFilesArray as $key) {
							startUpSound::$musMd5 		= $key['sndHash'];
							startUpSound::$durationMus 	= $key['duration'];
							$musOut 					= $key['sndName'];
						}
					}
			} else {
				startUpSound::$selectedMusic = "musicOff";
			}
				//MusDirs****************************************								
					startUpSound::$selectedMusic = str_replace(static::$AbsolutesoundPath,"",$currentMusFolder).'/'.$musOut; 	//Local musPath
					startUpSound::$musFileAbsolute = $currentMusFolder.'/'.$musOut; //Absolute musFilePath
				//***********************************************

			if($debug === true) {
				$output =
					'<div style="border: 1px solid black; padding: 5px; border-radius: 10px; width: fit-content; margin: 15px;">'.
					'<h1 style="font-size: large;margin: 0;">Mus Gen</h1>'.
						"<b>selectedFile:</b>".			static::$selectedMusic.'<br>'.
						"<b>isEaster:</b>".				static::$isEasterMus.'<br>'.
						static::$easterMusWarn.
						"<b>musFileAbsolutePath:</b>".	static::$musFileAbsolute.'<br>'.
						"<b>musFileDuration:</b>".		static::$durationMus.'<br>'.
						"<b>musMOOD:</b>".				static::$SNDMOOD.'<br>'.
						"<b>filesInDir:</b>".			static::$musFilesNum.'<br>'.
						"<b>selectedMusFileHash:</b>".	static::$musMd5.'<br>'.
						"<b>eventName:</b>".			static::$eventNow.static::$soundRangeDebug.$unExistingFolder.'</div></div>';
						
					echo $output;
			}
		}

		/*
		 * @param boolean $debug
		 * @return String {Random sound with parameters}
		 */
		private function genSnd($debug = false) {
			$minRange = 1; 			//Min genRange
			$unExistingFolder = ''; //Exception message

			if(self::$config['enableVoice']) {
				audioUtils::easter(self::$config['easterSndRarity'], static::$debug, 'sound');
				$currentSoundFolder = static::$AbsolutesoundPath.'/'.static::$eventNow.'/'.static::$sndMountPoint.static::$seasonNow.static::$dayTimeNow.static::$easter;	//Folder of Sounds
				if(is_dir($currentSoundFolder)) {
					startUpSound::$soundFilesNum = count(filesInDir::filesInDirArray($currentSoundFolder, '.mp3'));
					if(static::$isEasterSnd === 'true'){	
						if(startUpSound::$soundFilesNum < 1){
							$currentSoundFolder = str_replace('/easter', "", $currentSoundFolder);
							startUpSound::$easterSndWarn = '<b style="color: red;">Esater Snd not found, using common</b><br>';
						}
					}

					function genSnd($minRange){
							if(isset(startUpSound::$soundRange) && startUpSound::$soundRange !== 0) {
								$RandSoundFile = audioUtils::genRange('voice', startUpSound::$soundRange);
							} else {
								$RandSoundFile = 'voice'.rand($minRange,startUpSound::$soundFilesNum).'.mp3';
							}
						return $RandSoundFile ;
					}
					$RandSoundFile = genSnd($minRange); 

					//SoundDirs**************************************
					startUpSound::$selectedSound = str_replace(static::$AbsolutesoundPath,"",$currentSoundFolder).'/'.$RandSoundFile;
					startUpSound::$soundFileAbsolute = static::$AbsolutesoundPath.static::$selectedSound;
					//***********************************************

					if(file_exists(static::$soundFileAbsolute)) {
						startUpSound::$soundMd5 = md5_file(static::$soundFileAbsolute);
						$getid3 = new getID3();
						$getid3->encoding = 'UTF-8';
						$getid3->Analyze(static::$soundFileAbsolute);
						startUpSound::$SNDMOOD = @$getid3->info["id3v2"]["comments"]["text"]["SNDMOOD"];
						startUpSound::$durationSnd = audioUtils::getFileLength($getid3);
						startUpSound::$soundAdditionalData = audioUtils::getAdditionalInfo($getid3);
					} else {
						startUpSound::$selectedSound = 'soundOff';
					}

				} else {
					$unExistingFolder = '<br><b>Warning! Folder not found:</b><span style="color: red;">'.$currentSoundFolder.'</span>';
					startUpSound::$selectedSound = 'soundOff';
				}
			}
			if($debug == true) {
				$output =
				'<div style="border: 1px solid black; padding: 5px; border-radius: 10px; width: fit-content; margin: 15px;">'.
					'<h1 style="font-size: large;margin: 0;">Sound Gen</h1>'.
					"<b>selectedFile:</b>".			static::$selectedSound.'<br>'.
					"<b>isEaster:</b>".				static::$isEasterSnd.'<br>'.
													static::$easterSndWarn.
					"<b>soundFileAbsolutePath:</b>".static::$soundFileAbsolute.'<br>'.
					"<b>soundFileDuration:</b>".	static::$durationSnd.'<br>'.
					"<b>soundsInDir:</b>".			static::$soundFilesNum.'<br>'.
					"<b>selectedSoundFileHash:</b>".static::$soundMd5.'<br>'.
					"<b>sndMood:</b>"			   .static::$SNDMOOD.'<br>'.
					"<b>Additional Info:</b>".		static::$soundAdditionalData.'<br>'.
					"<b>eventName:</b>".			static::$eventNow.static::$soundRangeDebug.$unExistingFolder.'
				</div></div>';
				echo $output;
			}
		}

		/*
		 * @param NO
		 * @return jsonAnswer
		 */
		private function outputJson() {
			$mountPoint = str_replace(SITE_ROOT, '', static::$AbsolutesoundPath);
			$outputArray = array(
					"maxDuration" 		=> (Integer)static::$maxDuration,
					"sndLevel" 			=> (Integer)-15,
					"musLevel" 			=> (Integer)-20,
					"selectedMusic" 	=> (String) static::$selectedMusic,
					"selectedSound" 	=> (String) static::$selectedSound,
					"soundMd5" 			=> (String) static::$soundMd5,
					"MusicMd5" 			=> (String) static::$musMd5,
					"eventInfo"			=> (String) static::$soundAdditionalData,
					"eventName" 		=> (String) static::$eventNow,
					'serverVersion'		=> (String) static::$serverVersion,
					'mountPoint'		=> (String) $mountPoint);

			return json_encode($outputArray, JSON_UNESCAPED_SLASHES);
		}
	}

	class audioGen extends startUpSound {
		//WIP
	}