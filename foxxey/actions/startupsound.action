<?php
/*
=====================================================
 startUpSound Class
-----------------------------------------------------
 https://Foxesworld.ru/
-----------------------------------------------------
 Copyright (c) 2016-2021 FoxesWorld
-----------------------------------------------------
 This code is reserved
-----------------------------------------------------
 File: startUpSound.class.php
-----------------------------------------------------
 Version: 0.4.45.0 Unreal
-----------------------------------------------------
 Usage: Current Event Sound generation
=====================================================
*/

if (!defined('FOXXEY')) {
	die ('{"message": "Not in FOXXEY thread"}');
} else {
	define('startUpSound', true);
}

/*		 USAGE

		$startSound = new startUpSound();
		$sounds = $startSound->generateAudio();
		Returns JSON
*/

/* TODO 
 * Replacing Mus|Snd variables with array
 * Maybe storing a Mus|Sound file shift in ID3 tags
 * Force easterMus, Force easterSnd
 * Config utils
 */
 
 /* WARNING 
  * Derprecated argument soundRange may be removed as musRange was removed before
  * And removed with MOOD or CHARACTER restrictions as we may not be capable restricting a specifyed
  * array of sounds
  */

	class startUpSound {

		/* Base utils */

		private $cacheFilePath 			= ETC.'startupsound.timetable';
		private $event 					= '';
		private static $serverVersion 	= '0.4.45.0 Unreal';
		public static $AbsolutesoundPath;
		private static $currentDate 	= CURRENT_DATE;
		private static $musMountPoint 	= 'mus';
		private static $sndMountPoint 	= 'snd';
		protected static $eventNow 		= 'common';
		private static $seasonNow 		= '';
		private static $dayTimeNow 		= '';
		private static $useDayTime 		= false;		//Use DayTime snd? (Morning, Day, Evening, Night)
		private static $useSeasons 		= false;		//Use Seasons? (Winter, Spring, Summer, Autumn)
		public static $musFilesNum 		= 0;
		public static $soundFilesNum 	= 0;
		protected static $easter 		= "";
		
		/*CONFIG*/
		private $mdlName				= null;
		protected static $config		= array();
		private $defaultConfig = array('startupsound' => 
		array(
			'debug' => false,
			'mountDir' 			=> SITE_ROOT."/etc/startUpSoundRepo",
			'enableVoice' 		=> true,
			'enableMusic' 		=> true,
			'easterMusRarity'   => 10,
			'easterSndRarity'	=> 1
		));

		protected static $eventsArray = array(
			'01' => array(
				"1-12" =>  array(
					'eventName' => 'winterHolidays',
					'soundRange'=> '2/5'
				)
			),

			'02' => array(
			
			),
			
			'03' => array(
			
			),
			
			'04' => array(
			
			),
			
			'05' => array(

			),

			'06' => array(

			),

			'07' => array(

			),

			'08' => array(
				'5-13' => array(
					'eventName' => 'Killing teddy!',
					'soundRange'=> '2/5'),

				'20-23' => array(
					'eventName' => 'Praising DarkFoxes',
					'soundRange'=> '2/5'
				)
			),

			'09' => array(

				'1' => array(
					'eventName' => '8bit')
			),

			'10' => array(
				'13' => array(

				),

			),

			'11' => array(
			
			),

			'12' => array(
				//'eventName' => 'winterHolidays'
			)
		);

		/* Mus */
		private static $selectedMusic		= ''; 				//Selected mus File
		private static $musFileAbsolute		= '';				//Absolute musFilePath
		protected static $durationMus 		= 0;				//Duration of a musFile
		private static $musMd5				= '';				//musFile md5
		protected static $isEasterMus 		= 'false';			//Is the mus is easter
		private static $easterMusWarn		= '';				//Warn message if easter not found

		/* Sound */
		protected static $selectedSound		= ''; 		//Selected sound File
		protected static $SNDMOOD			= '';
		protected static $soundFileAbsolute	= '';		//Absolute soundFilePath
		protected static $durationSnd 		= 0;		//Duration of a soundFile
		protected static $soundMd5			= '';		//soundFile md5
		protected static $soundAdditionalData = 'NoData';	//Comment
		public static $soundRange			= 0;		//Range of sound files
		protected static $isEasterSnd 		= 'false';	//Is the sound is easter
		protected static $easterSndWarn		= '';		//Warn message if easter not found

		/* Both */
		protected static $moodToPlay 		= null;
		protected static $characterToPlay 	= null;
		protected static $maxDuration 		= 0;		//Maximum duration

		//Initialisation
		function __construct() {
			$this->mdlName = basename(__FILE__, '.action');
			$conf = conff::confGen($this->mdlName, $this->defaultConfig);
			self::$config = $conf->readInIarray();

			if(!isset($_REQUEST['startUpSoundAPI'])) {
				startUpSound::$eventsArray = file::efile($this->cacheFilePath, true, startUpSound::$eventsArray)['content'];
			}

			if(static::$useSeasons){
				startUpSound::$seasonNow = seasonOptions::seasonNow();
			}

			filesInDir::getIncludes($this->mdlName);
			startUpSound::$AbsolutesoundPath = self::$config['mountDir'];
			
			/*SUBCLASS INIT*/
			startUpSound::$moodToPlay 	   = $_GET['MOOD'] 		?? null;
			startUpSound::$characterToPlay = $_GET['CHAR'] 		?? null;
			$this->event = new eventScanning(date::getCurrentDate('day'), date::getCurrentDate('month'));
				if(static::$useDayTime) {
					$this->dayTimeGetting();
				}

			$this->genSnd();
			$this->genMus();
			audioUtils::maxDuration();
			if(isset($_REQUEST['startUpSoundAPI'])) {
				$easterMusNum = count(filesInDir::filesInDirArray(static::$AbsolutesoundPath.'/'.static::$eventNow.'/'.static::$musMountPoint.'/easter', '.mp3'));
				$easterSndNum = count(filesInDir::filesInDirArray(static::$AbsolutesoundPath.'/'.static::$eventNow.'/'.static::$sndMountPoint.'/easter', '.mp3'));
				$api = new startUpSoundAPI(static::$serverVersion, static::$musFilesNum, static::$soundFilesNum, $easterMusNum, $easterSndNum, static::$eventNow, $this->cacheFilePath, startUpSound::$eventsArray);
				$api->apiOut();
			}
		}

		public function generateAudio() {
			exit($this->outputJson());
		}

		private function genMus() {	

			if(self::$config['enableMusic']) {
				$easterStatus = audioUtils::easter(self::$config['easterMusRarity'], 'music');

					$currentMusFolder = static::$AbsolutesoundPath.'/'.static::$eventNow.'/'.static::$musMountPoint.static::$easter;	
					if(!startUpSound::$SNDMOOD == null) {
						$dirScan = audioUtils::sndPreFetch($currentMusFolder);
						$thisMoodArray = audioUtils::getByTag('SNDMOOD', startUpSound::$SNDMOOD, $dirScan['allFiles']);
						$arraySize = count($thisMoodArray);
						switch($arraySize){
							case 0:
								$randMusFile = $thisMoodArray;
							break;
							
							default:
								$randMusFile = $thisMoodArray[rand(0, $arraySize-1)];
							break;
							
						}

						startUpSound::$selectedMusic = $randMusFile['fileName'];
						startUpSound::$musMd5 		 = $randMusFile['md5'];
						startUpSound::$durationMus 	 = $randMusFile['durationSnd'];

					} else {
						startUpSound::$selectedMusic = "musicOff";
					}
			} else {
				startUpSound::$selectedMusic = "musicOff";
			}
		}

		private function genSnd() {
			$unExistingFolder = '';

			if(self::$config['enableVoice']) {
				audioUtils::easter(self::$config['easterSndRarity'], 'sound');
				$currentSoundFolder = static::$AbsolutesoundPath.'/'.static::$eventNow.'/'.static::$sndMountPoint.static::$seasonNow.static::$dayTimeNow.static::$easter;
				if(is_dir($currentSoundFolder)) {
					$dirScan = audioUtils::sndPreFetch($currentSoundFolder);
					startUpSound::$soundFilesNum = count($dirScan['allFiles']);
					if(static::$isEasterSnd === 'true'){	
						if(startUpSound::$soundFilesNum < 1){
							$currentSoundFolder = str_replace('/easter', "", $currentSoundFolder);
							startUpSound::$easterSndWarn = '<b style="color: red;">Esater Snd not found, using common</b><br>';
						}
					}
					
					function genSndFromArray($array, $minRange, $sndRange){

						$arraySize = count($array)-1;
						if($sndRange) {
							switch(is_array($sndRange)){
								case true:
									$rndNum = rand($sndRange[0], $sndRange[1]);
								break;
											
								case false:
									$rndNum = $sndRange;
								break;
							}
						} else {
							$rndNum = rand($minRange, $arraySize);
						}

						$outArray = array(
							'fileName' => $array[$rndNum]['fileName'],
							'md5' => $array[$rndNum]['md5'],
							'durationSnd'=> $array[$rndNum]['durationSnd'],
							'SNDMOOD'	  => $array[$rndNum]['SNDMOOD'],
							'soundAdditionalData' => $array[$rndNum]['soundAdditionalData']
						);
						
						return $outArray;
					}

					function filterArray($dirScan, $sndRange, $character, $mood){
						$minRange = 0;
						if($mood) {
							switch($mood){
								case null:
									$arrayFiles = genSndFromArray($dirScan['allFiles'], $minRange, $sndRange);
								break;
								
								default:
									if(in_array($mood, $dirScan['moodList'])) {
										$arrayFiles = audioUtils::getByTag('SNDMOOD', $mood, $dirScan['allFiles']);
									} else {
										$arrayFiles = genSndFromArray($dirScan['allFiles'], $minRange, $sndRange);
									}
								break;
							}
						} else {
							$arrayFiles = $dirScan['allFiles'];
						}
						
						if($character) {
							switch($character){
								case null:
									$generatedSND = genSndFromArray($arrayFiles, $minRange, $sndRange);
								break;
								
								default:
									if(in_array($character, $dirScan['charactersArray'])){
										$thisCharacterArray = audioUtils::getByTag('CHARACTER', $character, $arrayFiles);
										switch(count($thisCharacterArray)){
											case 0:
												$generatedSND = $arrayFiles[rand(0,count($arrayFiles)-1)];
											break;
											
											default:
												$generatedSND = $thisCharacterArray[rand(0,count($thisCharacterArray)-1)];
											break;
										}
									} else {
										$generatedSND = genSndFromArray($arrayFiles, $minRange, $sndRange);
									}
								break;
							}
						} else {
							$generatedSND = genSndFromArray($arrayFiles, $minRange, $sndRange);
						}
						return $generatedSND;
					}

					$generatedSND = filterArray($dirScan, startUpSound::$soundRange, startUpSound::$characterToPlay, startUpSound::$moodToPlay);
					startUpSound::$selectedSound 	   = $generatedSND['fileName'];
					startUpSound::$soundMd5 	 	   = $generatedSND['md5'];
					startUpSound::$SNDMOOD 		 	   = $generatedSND['SNDMOOD'];
					startUpSound::$durationSnd 	 	   = $generatedSND['durationSnd'];
					startUpSound::$soundAdditionalData = $generatedSND['soundAdditionalData'];

				} else {
					$unExistingFolder = '<br><b>Warning! Folder not found:</b><span style="color: red;">'.$currentSoundFolder.'</span>';
					startUpSound::$selectedSound = 'soundOff';
				}
			}
		}

		private function outputJson() {
			$mountPoint = str_replace(SITE_ROOT, '', static::$AbsolutesoundPath);
			$outputArray = array(
					"maxDuration" 		=> (Integer)static::$maxDuration,
					"sndLevel" 			=> (Integer)-15,
					"musLevel" 			=> (Integer)-20,
					"selectedMusic" 	=> (String) static::$selectedMusic,
					"selectedSound" 	=> (String) static::$selectedSound,
					"soundMd5" 			=> (String) static::$soundMd5,
					"MusicMd5" 			=> (String) static::$musMd5,
					"eventInfo"			=> (String) static::$soundAdditionalData,
					"eventName" 		=> (String) static::$eventNow,
					'serverVersion'		=> (String) static::$serverVersion,
					'mountPoint'		=> (String) $mountPoint);

			return json_encode($outputArray, JSON_UNESCAPED_SLASHES);
		}
	}