<?php
/*
=====================================================
 Tell me your password and I'll tell who you are 
-----------------------------------------------------
 https://Foxesworld.ru/
-----------------------------------------------------
 Copyright (c) 2016-2021  FoxesWorld
-----------------------------------------------------
 This code is reserved
-----------------------------------------------------
 File: authorise.class.php
-----------------------------------------------------
 Verssion: 0.1.20.1 Release
-----------------------------------------------------
 Usage: Authorising and using HWID
=====================================================
*/

/* TODO
 * Userbalance&GeoIP doesn't recieve $userDataDB Var
 */

	if(!defined('FOXXEY')) {
		die ('{"message": "Not in FOXXEY thread"}');
	} else {
		define('Authorisation', true);
	}

class Authorise {
	
		/* INPUT DATA */
		protected $login;
		protected $pass;
		protected $HWID;
		
		/* INTERNAL */
		private $correctLogin;
		private $ip;
		private $HWIDstatus;
		private $database;
		private $webSiteDB;
		private $launcherDB;
		private $randTexts;
		private $noName;
		private $HWIDerrorMessage;
		private $neededData   = array('login', 'pass', 'HWID', 'ip');
		private $personalData = array('fullname', 'user_group', 'reg_date');
		private static $LoggerAuth;

		/* USERDATA */
		private $realName;
		private $realPass;
		private $realMail;
		private $fullname;
		private $user_group;
		private $reg_date;
		
		/* CONFIG */
		private $mdlName		= null;
		private $authModules	= array();
		private $defaultConfig = array('authorise' => 
		array(
			'checkHWID'    => true,
			'geoIPcheck'   => true,
			'useAntiBrute' => true,
			'getBalance'   => true,
			'foxChecking'  => true,
		));
		
		 /**
		 * Authorise constructor.
		 * @param $login
		 * @param $pass
		 * @param $HWID
		 */
		function __construct($login, $pass, $HWID, $launcherDB, $userDataDB){
			$this->mdlName = basename(__FILE__, '.action');
			$conf = conff::confGen($this->mdlName, $this->defaultConfig);
			$this->authModules = $conf->readInIarray();
			
			global $config;
			filesInDir::getIncludes($this->mdlName);
			try {
				$this->webSiteDB  = new db($config['db_user'], $config['db_pass'], $config['db_database'], $config['db_host']);
			} catch(PDOException $pe) {
				
			}
			$this->launcherDB = $launcherDB;
			$this->ip = $_GET['UserIP'] ?? null;
			$this->userDataDB = $userDataDB;
			$this->login = $login;
			$this->pass = $pass;
			$this->HWID = $HWID;
			$this->correctLogin = false;
		}
	
		public function logIn() {
			global $config, $message;
			$units = 0;
			Authorise::$LoggerAuth = new Logger('AuthLog');

			//FILTRATING INPUT DATA
				foreach($this->neededData as $key){
					if(!$this->{$key}) {
						exit('{"message": "'.$message['dataNotIsset']." - ".$key.'"}');
					} else {
						$this->{$key} = str_replace($config['not_allowed_symbol'],'',strip_tags(stripslashes($this->{$key})));
					}
				}
			//*********************

			//Getting AUTH USERDATA TO Be Updated
			$this->realName  = json_decode(mainSite::getUserData($this->login, 'name'))		-> name		  ?? null;
			$this->realPass  = json_decode(mainSite::getUserData($this->login, 'password'))	-> password	  ?? null;
			$this->realMail  = json_decode(mainSite::getUserData($this->login, 'email'))	-> email 	  ?? null;
 
				$this->loginLocation();

				//IF RealName is Null
				if($this->realName == null) {
					static::$LoggerAuth->WriteLine($this->login.' is an unreal user and does not exist!');
					exit('{"message": "'.$message['userNotFound'].'"}');
				} else {

						$this->correctLogin = authorize::passVerify($this->pass, $this->realPass);

						// Checking HWID (We do that even if pass is correct to find out who is brutting!)
							$HWIDresult = $this->checkingHWID();
							$HWIDuser = $HWIDresult[1];
							$hardwareCheck =$HWIDresult[0];
						//==============

						if(!$this->correctLogin) { //If Login is incorrect
							if($this->authModules['useAntiBrute']) {
								$antiBrute = new antiBrute($this->ip, $this->launcherDB, $config['antiBruteDebug']);
							}
							static::$LoggerAuth->WriteLine('Incorrect login for '.$this->ip.' as '.$this->login.' using `'.$this->pass.'` Bruting by '.$HWIDuser);
							$this->incorrectPass($this->login, $HWIDuser);
							exit('{"message": "'.$message['wrongLoginPass'].'"}');
						} else {


						if($this->HWIDstatus === 'true'){ //If HWID is correct
								static::$LoggerAuth->WriteLine('Successful authorisation for '.$HWIDuser.' with the correct HWID');
								$this->successfulAuth($this->login);
								authorize::passwordReHash($this->pass, $this->realPass, $this->realName);
								
								//GETTING PERSONAL DATA
								foreach ($this->personalData as $key){
									$this->{$key}= json_decode(mainSite::getUserData($this->login, $key))	-> {$key};
								}

							// Getting Balance
								$balResult = $this->getBalance();
								$balance = $balResult[0];
								$units = $balResult[1];
							//================

							// Fox checking
							if($this->authModules['foxChecking']) {
								if(class_exists('foxCheck')) {
									$checkFox = new foxCheck($this->login, $config['foxCheckDebug'], $this->userDataDB, static::$LoggerAuth);
									if($checkFox->checkFox() === true){
										$balance->addUnitsPrize($this->login);
										echo '{"message": "'.$message['congrats'].'"},';
									}
								} else {
									echo '{"message": "Module foxCheck not found!", "desc": "We can`t check if you are a Fox!"},';
								}
							}
							//=================
							$fullname=$this->fullname??randTexts::getUserName();
							die('{"login": "'.$this->login.'", "fullName":"'.$fullname.'", "regDate": '.$this->reg_date.', "userGroup": '.$this->user_group.',  "balance": '.$units.', "hardwareId":  '.$this->HWIDstatus.'}');
						} else {
							static::$LoggerAuth->WriteLine('Incorrect HWID for '.$this->login.' IP is - '.$this->ip.' Bruted by '.$HWIDuser);
								if($config['checkHWID'] === true) {
									if(class_exists('HWID')) {
										$hardwareCheck->renewHWID($this->realMail, $this->ip, $this->login, $this->HWID);
									}
								}
								if(class_exists('randTexts')) {
									$this->randTexts = new randTexts('wrongHWID');
									$this->HWIDerrorMessage = $this->randTexts->textOut();
								} else {
									$this->HWIDerrorMessage = 'Incorrect HWID';
								}
							die('{"login": "'.$this->login.'", "fullName":"'.$this->fullname.'", "message": "'.$this->HWIDerrorMessage.'", "hardwareId": '.$this->HWIDstatus.'}');
						}
					}
				}
		}
		
		private function loginLocation(){
			if($this->authModules['geoIPcheck']) {
				if(class_exists('geoPlugin')) {
					$geoplugin = new geoPlugin($this->ip);
					if($geoplugin->countryCode !== null) {
						static::$LoggerAuth->WriteLine($this->login.' attemping to log from ['.$geoplugin->countryCode.']'.$geoplugin->countryName .' '.$geoplugin->city.'...');
					} else {
						exit('{"message": "CountryCode was not identifyed! Aborting!"}');
					}
				} else {
					echo '{"message": "Module geoPlugin not found!", "desc": "Can`t get user login location!"},';
				}
			}
		}

		private function checkingHWID(){
			global $config;
			if($this->authModules['checkHWID']) {
				if(class_exists('HWID')) {
					$hardwareCheck = new HWID($this->login, $this->HWID, $this->launcherDB, $config['HWIDdebug']);
					$HWIDuser = $hardwareCheck->getUserNameByHWID() ?? $this->HWID;
					$this->HWIDstatus = $hardwareCheck->checkHWID() ? 'true' : 'false';
				} else {
					$this->HWIDstatus = 'true';
					$HWIDuser = $this->login;
					echo '{"message": "Module HWID not found!", "desc": "Can`t check user`s HWID validity!"},';
				}
			} else {
				$this->HWIDstatus = 'true';
				$HWIDuser = $this->login;
			}
			return array($hardwareCheck, $HWIDuser);
		}
		
		private function getBalance(){
			if($this->authModules['getBalance']) {
				if(class_exists('userbalance')) {
						$balance = new userbalance($this->login, 'realmoney', false);
						$units = $balance->getUserBalance();
				} else {
					$units = 100500;
					echo '{"message": "Module userbalance not found!", "desc": "Balance can`t be parsed!"},';
				}
			}
			
			return array($balance, $units);
		}
		
		//Will be replaced
		private function successfulAuth($login) {
			$query = "INSERT INTO `successfulAuth`(`login`) VALUES ('".$login."')";
			$this->launcherDB::run($query);
		}
		
		//Will be replaced
		private function incorrectPass($login, $HWIDuser) {
			$query = "INSERT INTO `wrongPass`(`login`, `realLogin`) VALUES ('".$login."', '".$HWIDuser."')";
			$this->launcherDB::run($query);
		}

}